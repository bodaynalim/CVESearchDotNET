//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Cve.DomainModels.CveXmlJsonModels
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// CPE name
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Def_cpe_name
    {
        [Newtonsoft.Json.JsonProperty("cpe22Uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cpe22Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("cpe23Uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Cpe23Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDate { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CPE match string or range
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Def_cpe_match
    {
        [Newtonsoft.Json.JsonProperty("vulnerable", Required = Newtonsoft.Json.Required.Always)]
        public bool Vulnerable { get; set; }

        [Newtonsoft.Json.JsonProperty("cpe22Uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cpe22Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("cpe23Uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Cpe23Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("versionStartExcluding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionStartExcluding { get; set; }

        [Newtonsoft.Json.JsonProperty("versionStartIncluding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionStartIncluding { get; set; }

        [Newtonsoft.Json.JsonProperty("versionEndExcluding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionEndExcluding { get; set; }

        [Newtonsoft.Json.JsonProperty("versionEndIncluding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionEndIncluding { get; set; }

        [Newtonsoft.Json.JsonProperty("cpe_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Def_cpe_name> Cpe_name { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines a node or sub-node in an NVD applicability statement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Def_node
    {
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }

        [Newtonsoft.Json.JsonProperty("negate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Negate { get; set; }

        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Def_node> Children { get; set; }

        [Newtonsoft.Json.JsonProperty("cpe_match", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Def_cpe_match> Cpe_match { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines the set of product configurations for a NVD applicability statement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Def_configurations
    {
        [Newtonsoft.Json.JsonProperty("CVE_data_version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CVE_data_version { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Def_node> Nodes { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Impact scores for a vulnerability as found on NVD.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Def_impact
    {
        /// <summary>
        /// CVSS V3.x score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseMetricV3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseMetricV3 BaseMetricV3 { get; set; }

        /// <summary>
        /// CVSS V2.0 score.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseMetricV2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseMetricV2 BaseMetricV2 { get; set; } 



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines a vulnerability in the NVD data feed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class CveItemModel
    {
        [Newtonsoft.Json.JsonProperty("cve", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Schema Cve { get; set; } = new Schema();

        [Newtonsoft.Json.JsonProperty("configurations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Def_configurations Configurations { get; set; }

        [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Def_impact Impact { get; set; }

        [Newtonsoft.Json.JsonProperty("publishedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublishedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDate { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AttackVectorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"ADJACENT_NETWORK")]
        ADJACENT_NETWORK = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL")]
        PHYSICAL = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedAttackVectorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"ADJACENT_NETWORK")]
        ADJACENT_NETWORK = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"PHYSICAL")]
        PHYSICAL = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AttackComplexityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedAttackComplexityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PrivilegesRequiredType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedPrivilegesRequiredType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UserInteractionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedUserInteractionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRED")]
        REQUIRED = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNCHANGED")]
        UNCHANGED = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED")]
        CHANGED = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNCHANGED")]
        UNCHANGED = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"CHANGED")]
        CHANGED = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CiaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModifiedCiaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ExploitCodeMaturityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNPROVEN")]
        UNPROVEN = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"PROOF_OF_CONCEPT")]
        PROOF_OF_CONCEPT = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"FUNCTIONAL")]
        FUNCTIONAL = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RemediationLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OFFICIAL_FIX")]
        OFFICIAL_FIX = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"TEMPORARY_FIX")]
        TEMPORARY_FIX = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"WORKAROUND")]
        WORKAROUND = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE")]
        UNAVAILABLE = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConfidenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"REASONABLE")]
        REASONABLE = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CiaRequirementType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SeverityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
        CRITICAL = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Json
    {
        /// <summary>
        /// CVSS Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonVersion Version { get; set; }

        [Newtonsoft.Json.JsonProperty("vectorString", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^CVSS:3.[01]/((AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XUNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])/)*(AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XUNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])$")]
        public string VectorString { get; set; }

        [Newtonsoft.Json.JsonProperty("attackVector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttackVectorType AttackVector { get; set; }

        [Newtonsoft.Json.JsonProperty("attackComplexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttackComplexityType AttackComplexity { get; set; }

        [Newtonsoft.Json.JsonProperty("privilegesRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrivilegesRequiredType PrivilegesRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("userInteraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserInteractionType UserInteraction { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScopeType Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("confidentialityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType ConfidentialityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType IntegrityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("availabilityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType AvailabilityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("baseScore", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double BaseScore { get; set; }

        [Newtonsoft.Json.JsonProperty("baseSeverity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SeverityType BaseSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("exploitCodeMaturity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExploitCodeMaturityType ExploitCodeMaturity { get; set; }

        [Newtonsoft.Json.JsonProperty("remediationLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemediationLevelType RemediationLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("reportConfidence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfidenceType ReportConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("temporalScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double TemporalScore { get; set; }

        [Newtonsoft.Json.JsonProperty("temporalSeverity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SeverityType TemporalSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("confidentialityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType ConfidentialityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType IntegrityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("availabilityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType AvailabilityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedAttackVector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedAttackVectorType ModifiedAttackVector { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedAttackComplexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedAttackComplexityType ModifiedAttackComplexity { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedPrivilegesRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedPrivilegesRequiredType ModifiedPrivilegesRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedUserInteraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedUserInteractionType ModifiedUserInteraction { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedScope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedScopeType ModifiedScope { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedConfidentialityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedCiaType ModifiedConfidentialityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedIntegrityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedCiaType ModifiedIntegrityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedAvailabilityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModifiedCiaType ModifiedAvailabilityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentalScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double EnvironmentalScore { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentalSeverity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SeverityType EnvironmentalSeverity { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AccessVectorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"ADJACENT_NETWORK")]
        ADJACENT_NETWORK = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL")]
        LOCAL = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AccessComplexityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AuthenticationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE")]
        MULTIPLE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CiaType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"PARTIAL")]
        PARTIAL = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ExploitabilityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNPROVEN")]
        UNPROVEN = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"PROOF_OF_CONCEPT")]
        PROOF_OF_CONCEPT = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"FUNCTIONAL")]
        FUNCTIONAL = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RemediationLevelType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OFFICIAL_FIX")]
        OFFICIAL_FIX = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"TEMPORARY_FIX")]
        TEMPORARY_FIX = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"WORKAROUND")]
        WORKAROUND = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE")]
        UNAVAILABLE = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ReportConfidenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED")]
        UNCONFIRMED = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"UNCORROBORATED")]
        UNCORROBORATED = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CollateralDamagePotentialType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW_MEDIUM")]
        LOW_MEDIUM = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM_HIGH")]
        MEDIUM_HIGH = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 5,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TargetDistributionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 4,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CiaRequirementType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_DEFINED")]
        NOT_DEFINED = 3,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Json2
    {
        /// <summary>
        /// CVSS Version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Json2Version Version { get; set; }

        [Newtonsoft.Json.JsonProperty("vectorString", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$")]
        public string VectorString { get; set; }

        [Newtonsoft.Json.JsonProperty("accessVector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccessVectorType AccessVector { get; set; }

        [Newtonsoft.Json.JsonProperty("accessComplexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccessComplexityType AccessComplexity { get; set; }

        [Newtonsoft.Json.JsonProperty("authentication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthenticationType Authentication { get; set; }

        [Newtonsoft.Json.JsonProperty("confidentialityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType2 ConfidentialityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType2 IntegrityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("availabilityImpact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaType2 AvailabilityImpact { get; set; }

        [Newtonsoft.Json.JsonProperty("baseScore", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double BaseScore { get; set; }

        [Newtonsoft.Json.JsonProperty("exploitability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExploitabilityType Exploitability { get; set; }

        [Newtonsoft.Json.JsonProperty("remediationLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemediationLevelType2 RemediationLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("reportConfidence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportConfidenceType ReportConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("temporalScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double TemporalScore { get; set; }

        [Newtonsoft.Json.JsonProperty("collateralDamagePotential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CollateralDamagePotentialType CollateralDamagePotential { get; set; }

        [Newtonsoft.Json.JsonProperty("targetDistribution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TargetDistributionType TargetDistribution { get; set; }

        [Newtonsoft.Json.JsonProperty("confidentialityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType2 ConfidentialityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType2 IntegrityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("availabilityRequirement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiaRequirementType2 AvailabilityRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentalScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double EnvironmentalScore { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Product
    {
        [Newtonsoft.Json.JsonProperty("product_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Product_name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Version Version { get; set; } = new Version();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Reference
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(ftp|http)s?://\S+$")]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("refsource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refsource { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Lang_string
    {
        [Newtonsoft.Json.JsonProperty("lang", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lang { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3999)]
        public string Value { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Schema
    {
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Always)]
        public SchemaData_type Data_type { get; set; }

        [Newtonsoft.Json.JsonProperty("data_format", Required = Newtonsoft.Json.Required.Always)]
        public SchemaData_format Data_format { get; set; }

        [Newtonsoft.Json.JsonProperty("data_version", Required = Newtonsoft.Json.Required.Always)]
        public SchemaData_version Data_version { get; set; }

        [Newtonsoft.Json.JsonProperty("CVE_data_meta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CVE_data_meta CVE_data_meta { get; set; } = new CVE_data_meta();

        [Newtonsoft.Json.JsonProperty("affects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Affects Affects { get; set; }

        [Newtonsoft.Json.JsonProperty("problemtype", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Problemtype Problemtype { get; set; } = new Problemtype();

        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public References References { get; set; } = new References();

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Description Description { get; set; } = new Description();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Schema2
    {
        [Newtonsoft.Json.JsonProperty("CVE_data_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CVE_data_type { get; set; }

        [Newtonsoft.Json.JsonProperty("CVE_data_format", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CVE_data_format { get; set; }

        [Newtonsoft.Json.JsonProperty("CVE_data_version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CVE_data_version { get; set; }

        /// <summary>
        /// NVD adds number of CVE in this feed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CVE_data_numberOfCVEs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CVE_data_numberOfCVEs { get; set; }

        /// <summary>
        /// NVD adds feed date timestamp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CVE_data_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CVE_data_timestamp { get; set; }

        /// <summary>
        /// NVD feed array of CVE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CVE_Items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CveItemModel> CVE_Items { get; set; } = new System.Collections.ObjectModel.Collection<CveItemModel>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class BaseMetricV3
    {
        [Newtonsoft.Json.JsonProperty("cvssV3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Json CvssV3 { get; set; }

        [Newtonsoft.Json.JsonProperty("exploitabilityScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double ExploitabilityScore { get; set; }

        [Newtonsoft.Json.JsonProperty("impactScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double ImpactScore { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class BaseMetricV2
    {
        [Newtonsoft.Json.JsonProperty("cvssV2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Json2 CvssV2 { get; set; }

        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Severity { get; set; }

        [Newtonsoft.Json.JsonProperty("exploitabilityScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double ExploitabilityScore { get; set; }

        [Newtonsoft.Json.JsonProperty("impactScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double ImpactScore { get; set; }

        [Newtonsoft.Json.JsonProperty("acInsufInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AcInsufInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("obtainAllPrivilege", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ObtainAllPrivilege { get; set; }

        [Newtonsoft.Json.JsonProperty("obtainUserPrivilege", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ObtainUserPrivilege { get; set; }

        [Newtonsoft.Json.JsonProperty("obtainOtherPrivilege", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ObtainOtherPrivilege { get; set; }

        [Newtonsoft.Json.JsonProperty("userInteractionRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UserInteractionRequired { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum JsonVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"3.0")]
        _3_0 = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"3.1")]
        _3_1 = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Json2Version
    {

        [System.Runtime.Serialization.EnumMember(Value = @"2.0")]
        _2_0 = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Version
    {
        [Newtonsoft.Json.JsonProperty("version_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Version_data> Version_data { get; set; } = new System.Collections.ObjectModel.Collection<Version_data>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SchemaData_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CVE")]
        CVE = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SchemaData_format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MITRE")]
        MITRE = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SchemaData_version
    {

        [System.Runtime.Serialization.EnumMember(Value = @"4.0")]
        _4_0 = 0,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class CVE_data_meta
    {
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^CVE-[0-9]{4}-[0-9]{4,}$")]
        public string ID { get; set; }

        [Newtonsoft.Json.JsonProperty("ASSIGNER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$")]
        public string ASSIGNER { get; set; }

        [Newtonsoft.Json.JsonProperty("STATE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string STATE { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Affects
    {
        [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vendor Vendor { get; set; } = new Vendor();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Problemtype
    {
        [Newtonsoft.Json.JsonProperty("problemtype_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Problemtype_data> Problemtype_data { get; set; } = new System.Collections.ObjectModel.Collection<Problemtype_data>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class References
    {
        [Newtonsoft.Json.JsonProperty("reference_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(500)]
        public System.Collections.Generic.ICollection<Reference> Reference_data { get; set; } = new System.Collections.ObjectModel.Collection<Reference>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Description
    {
        [Newtonsoft.Json.JsonProperty("description_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Lang_string> Description_data { get; set; } = new System.Collections.ObjectModel.Collection<Lang_string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Version_data
    {
        [Newtonsoft.Json.JsonProperty("version_value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version_value { get; set; }

        [Newtonsoft.Json.JsonProperty("version_affected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version_affected { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Vendor
    {
        [Newtonsoft.Json.JsonProperty("vendor_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Vendor_data> Vendor_data { get; set; } = new System.Collections.ObjectModel.Collection<Vendor_data>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Problemtype_data
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Lang_string> Description { get; set; } = new System.Collections.ObjectModel.Collection<Lang_string>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Vendor_data
    {
        [Newtonsoft.Json.JsonProperty("vendor_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vendor_name { get; set; }

        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Product2 Product { get; set; } = new Product2();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public class Product2
    {
        [Newtonsoft.Json.JsonProperty("product_data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Product> Product_data { get; set; } = new System.Collections.ObjectModel.Collection<Product>();



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}